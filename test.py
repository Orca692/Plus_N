while True: # Цикл бесконечной программы
    cuscod = input('+N ') # Ввод для User
    word = cuscod.split() # Разбитие команды пользователя на слова
    command = [] # Массив, в котором будут храниться команды
    index = 0 # Индекс для перебора всех команд
    count_operators = -1 #? Индекс для разделения строки на массивы по операторам
    while index < len(word): # Перебор всех команд в строке 
        
        wd = list(word[index][0]) # Переменная на проверку первого символа
        if wd[0] == '@': # Проверка команды на адрес
            command[count_operators].append(word[index]) # Присваивает адрес к массиву внутри
            # списка по индексу count_operators
        elif wd[0] == '+': # Проверка команды на опцию
            # print(list(command[count_operators][len(command[count_operators]) -1 ])[0]) # Показать предыдущий элемент массива
            # внутри списка перед новой опцией
            if list(command[count_operators][len(command[count_operators]) -1 ])[0] == '@': # Проверка массива внутри списка на ошибочный
                # синтаксис, перед опцией не может стоять адрес
                print('syntax err') # Сообщение об ошибке
                command.pop()
                break
            else: # Если перед опцией нету адреса, т.е. нету ошибки, то выполняется команда ниже
                command[count_operators].append(word[index]) # Присваивает опцию к массиву внутри
                # списка по индексу count_operators
        else: # Заключение команды как оператор, переход к следующему оператору
            command.append([word[index]]) # Добавление нового массива к списку 
            count_operators += 1 # Индекс для разделения строки на массивы по операторам
        index += 1 # Переключает к следующей команде
    print(command) # Проверка команды

#                       ЗАДАЧА
# ПЕРЕПИСАТЬ КОД В ЧИСТОВИК
# А ТАКЖЕ ПОДУМАТЬ НАД ТЕМ КАК ДОЛЖЕН ВЫГЛЯДЕТЬ ВЕСЬ INPUT ОТ ПОЛЬЗОВАТЕЛЯ К ЭТОМУ КОДУ
# 
# 
# 
# 
# 